{"version":3,"sources":["logo.svg","components/Boxes.js","components/Home.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","Boxes","boxStyle","backgroundColor","this","props","active","height","width","border","style","onClick","Component","Home","isLeftMost","cellPosition","boardWidth","isUpMost","isRightMost","isDownMost","boardHeight","upperLeftAlive","calculatedPosition","board","upperAlive","upperRightAlive","leftAlive","rightAlive","downLeftAlive","downAlive","downRightAlive","calculateCellResult","isAlive","result","state","updateBoardState","temp","newBoard","i","length","obj","id","push","updateBoard","widthSize","x","y","bodyStyle","display","gridTemplateColumns","body","map","toggleBox","className","connect","ownProps","postId","post","posts","find","dispatch","deletePost","type","App","Boolean","window","location","hostname","match","initState","title","name","array","Math","round","random","generateBoard","rootReducer","action","newPosts","filter","item","index","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbb76712.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Boxes extends Component {\r\n    render() {\r\n        const boxStyle = {\r\n            backgroundColor: this.props.active === 1 ? \"black\" : \"white\",\r\n            height: \"20px\",\r\n            width: \"20px\",\r\n            border: \"1px solid lightblue\"\r\n        }\r\n        return (\r\n            <div style={boxStyle} onClick={this.props.onClick}>\r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default Boxes;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deletePost, toggleBox, updateBoard } from '../actions/postActions';\r\nimport Boxes from '../components/Boxes.js';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            widthSize: \"20px\",\r\n        };\r\n    }\r\n\r\n    getValueAt(x,y){\r\n        return this.board[(x*y)-1];\r\n    }\r\n\r\n\r\n    isLeftMost = (cellPosition) => {        \r\n        if(cellPosition % this.props.boardWidth === 0){\r\n            return true;\r\n        } \r\n        return false;\r\n    }\r\n\r\n    isUpMost = (cellPosition) => {\r\n        if(cellPosition - this.props.boardWidth < 0){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isRightMost = (cellPosition) => {\r\n        if(this.props.boardWidth - (cellPosition % this.props.boardWidth) === 1){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isDownMost = (cellPosition) => {\r\n        if((cellPosition + this.props.boardWidth) >= (this.props.boardWidth * this.props.boardHeight) ){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    upperLeftAlive = (cellPosition) => {\r\n        if(this.isLeftMost(cellPosition) || this.isUpMost(cellPosition)){\r\n            return 0;\r\n        }\r\n\r\n        var calculatedPosition = (cellPosition - this.props.boardWidth) - 1;\r\n        return this.props.board[calculatedPosition].active;\r\n    }\r\n\r\n    upperAlive = (cellPosition) => {\r\n        if(this.isUpMost(cellPosition)){\r\n            return 0;\r\n        }\r\n\r\n        var calculatedPosition = cellPosition - this.props.boardWidth;\r\n        return this.props.board[calculatedPosition].active;\r\n    }\r\n\r\n    upperRightAlive = (cellPosition) => {\r\n        if(this.isUpMost(cellPosition) || this.isRightMost(cellPosition)){\r\n            return 0;\r\n        }\r\n        var calculatedPosition = (cellPosition - this.props.boardWidth) + 1;\r\n        return this.props.board[calculatedPosition].active; \r\n    }\r\n\r\n    leftAlive = (cellPosition) => {\r\n        if(this.isLeftMost(cellPosition)){\r\n            return 0;\r\n        }\r\n        var calculatedPosition = cellPosition - 1;\r\n        return this.props.board[calculatedPosition].active;\r\n    }\r\n\r\n    rightAlive = (cellPosition) => {\r\n        if(this.isRightMost(cellPosition)){\r\n            return 0;\r\n        }\r\n        var calculatedPosition = cellPosition + 1;\r\n        return this.props.board[calculatedPosition].active;\r\n    }\r\n\r\n    downLeftAlive = (cellPosition) => {\r\n        if(this.isLeftMost(cellPosition) || this.isDownMost(cellPosition)){\r\n            return 0;\r\n        }\r\n\r\n        var calculatedPosition = (cellPosition + this.props.boardWidth) - 1;\r\n        return this.props.board[calculatedPosition].active;\r\n    }\r\n\r\n    downAlive = (cellPosition) => {\r\n        if(this.isDownMost(cellPosition)){\r\n            return 0;\r\n        }\r\n\r\n        var calculatedPosition = (cellPosition + this.props.boardWidth);\r\n        return this.props.board[calculatedPosition].active;\r\n    }\r\n\r\n    downRightAlive = (cellPosition) => {\r\n        if(this.isRightMost(cellPosition) || this.isDownMost(cellPosition)){\r\n            return 0;\r\n        }\r\n\r\n        var calculatedPosition = (cellPosition + this.props.boardWidth) + 1;\r\n        return this.props.board[calculatedPosition].active;\r\n    }\r\n\r\n    calculateCellResult = (cellPosition) => {\r\n        var isAlive = this.props.board[cellPosition].active === 1;\r\n        \r\n        var result = this.upperLeftAlive(cellPosition) + this.upperAlive(cellPosition) + this.upperRightAlive(cellPosition) +\r\n                     this.leftAlive(cellPosition) + this.rightAlive(cellPosition) + \r\n                     this.downLeftAlive(cellPosition) + this.downAlive(cellPosition) + this.downRightAlive(cellPosition);\r\n\r\n        var state = 0;\r\n        if(!isAlive && result === 3){\r\n            state =  1;\r\n        }\r\n\r\n        if(isAlive && result <= 1){\r\n            state = 0;\r\n        }\r\n\r\n        if(isAlive && result >= 4){\r\n            state = 0\r\n        }\r\n\r\n        if(isAlive && (result === 2 || result === 3)){\r\n            state = 1;\r\n        }\r\n        return state;\r\n    }\r\n\r\n    updateBoardState = () => {\r\n        var temp = this.props.board;\r\n        var newBoard = [];\r\n        for(let i = 0; i < temp.length; i++){\r\n            var obj = {\r\n                id: i+1,\r\n                active: this.calculateCellResult(i)\r\n            }\r\n            newBoard.push(obj);\r\n        }\r\n\r\n        this.props.updateBoard(newBoard);\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.width;\r\n        const widthSize = this.state.widthSize;\r\n        const bodyStyle = {\r\n            display: \"grid\",\r\n            gridTemplateColumns : `repeat(${this.props.boardWidth}, ${this.state.widthSize})`\r\n        }\r\n        \r\n        const body = <div style={bodyStyle}>\r\n                        {this.props.board.map(x => <Boxes id={x.id} active={x.active} onClick={() => {this.props.toggleBox(x.id);}}/>)}\r\n                    </div>\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {body}\r\n                <div><button onClick={this.updateBoardState}>Update</button></div>                \r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let id = ownProps.postId;\r\n    return {\r\n        post: state.posts.find(post => post.id === id),\r\n        board: state.board,\r\n        boardWidth: state.boardWidth,\r\n        boardHeight: state.boardHeight\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deletePost: (id) => { dispatch(deletePost(id))},\r\n        toggleBox: (id) => { dispatch(toggleBox(id))},\r\n        updateBoard: (board) => { dispatch(updateBoard(board))}\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","export const deletePost = (id) => {\r\n    return {\r\n        type: 'DELETE_POST',\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const toggleBox = (id) => {\r\n    return {\r\n        type: 'TOGGLE_BOX',\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const updateBoard = (board) => {\r\n    return {\r\n        type: 'UPDATE_BOARD',\r\n        board: board\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home postId=\"1\"/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    posts: [{id:'1', title: 'F', body: 'Hello', name: 'Josh'}],\r\n    board: generateBoard(10, 10),\r\n    boardWidth: 10,\r\n    boardHeight: 10\r\n}\r\n\r\nfunction generateBoard(x, y){\r\n    var array = [];\r\n    \r\n    for (var i = 1; i <= x*y; i++) {\r\n        var obj = {\r\n            id: i,\r\n            active: Math.round(Math.random())\r\n        } \r\n        array.push(obj);\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if(action.type === 'DELETE_POST'){\r\n        let newPosts = state.posts.filter(post => {\r\n            return action.id !== post.id;\r\n        });\r\n        return {\r\n            ...state,\r\n            posts: newPosts\r\n        }\r\n    }\r\n\r\n    if(action.type === 'TOGGLE_BOX'){\r\n        var x = state.board.map((item, index) => {\r\n            if(item.id === action.id){\r\n                item.active = (item.active === 0) ? 1 : 0;\r\n            }        \r\n            // Leave every other item unchanged\r\n            return item;\r\n          });\r\n        return {\r\n            ...state,\r\n            board: x\r\n        }\r\n    }\r\n\r\n    if(action.type === 'UPDATE_BOARD'){\r\n        return {\r\n            ...state,\r\n            board: action.board\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}