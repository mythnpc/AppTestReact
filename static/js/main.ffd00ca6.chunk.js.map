{"version":3,"sources":["logo.svg","components/Boxes.js","components/CustomButton.js","components/Utility.js","components/ShapeGenerator/ShapeGeneratorItem.js","components/ShapeGenerator/ShapeGeneratorContainer.js","actions/postActions.js","components/Home.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","Boxes","getColor","props","active","boxStyle","backgroundColor","this","minHeight","minWidth","outline","display","Overlay","keyframes","styled","div","style","onMouseEnter","onClick","isMarked","Component","CustomButton","className","class","getClass","message","utility","_boardWidth","_boardHeight","boardWidth","boardHeight","isLeftMost","cellPosition","isUpMost","isRightMost","isDownMost","wrapsAroundTop","wrapsAroundLeft","wrapsAroundRight","wrapsAroundBottom","getAdjacentCells","arrayOfAdjacentCells","push","calculatedPosition","upperLeftAlive","upperAlive","upperRightAlive","leftAlive","rightAlive","downLeftAlive","downAlive","downRightAlive","getPosition","x","y","getMooreCells","cellPositionX","cellPositionY","arrayCell","getConnectedCells","board","arrayOfConnectedCells","_getConnectedCells","activeAdjacentCells","adjacentCells","i","length","cell","_getActiveAdjacentCells","undefined","console","log","includes","getPositionX","getPositionY","Math","floor","captureCellsState","cellPositions","arrayOfCellsState","obj","id","ShapeGeneratorItem","classApplied","selected","body","gridTemplateColumns","justifyContent","margin","boardShape","map","ShapeGeneratorContainer","width","savedShapes","selectedShapeId","selectShape","connect","state","ownProps","dispatch","shapeId","type","Home","toggleClickState","setState","clickState","marked","cleanBoard","calculateCellResult","util","isAlive","result","emptyBoard","updateBoardStateInterval","intervalId","setInterval","updateBoardState","clearInterval","temp","newBoard","updateBoard","findIndex","setMarked","cellId","saveShape","onBoxClick","clickStates","toggleBox","selectedShapeBoardState","arrayOfAffectedCells","activeState","applySelectedShape","widthSize","buttonContainer","postId","post","posts","find","deletePost","boardState","App","Boolean","window","location","hostname","match","initState","title","name","array","round","random","generateBoard","rootReducer","action","newPosts","filter","item","index","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffd00ca6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { keyframes } from \"styled-components\";\r\nimport styled from 'styled-components';\r\n\r\nclass Boxes extends Component {\r\n    getColor = () => {\r\n        return this.props.active === 1 ? \"black\" : \"white\";\r\n    }\r\n\r\n    render() {\r\n        const boxStyle = {\r\n            backgroundColor: this.getColor(),\r\n            minHeight: this.props.minHeight ? this.props.minHeight :\"20px\",\r\n            minWidth: this.props.minWidth ? this.props.minWidth : \"20px\",\r\n            outline: \"1px solid lightblue\" ,\r\n            display: \"inherit\",\r\n            \r\n        }\r\n\r\n\r\n        const rotate = keyframes`\r\n            from {\r\n                background-color: ${this.getColor()};\r\n                \r\n            }\r\n        \r\n            to {\r\n                background-color: red;\r\n                \r\n            }\r\n        `;\r\n\r\n        const Overlay = styled.div`\r\n            border: \"1px solid yellow\";\r\n            opacity: 0.5;\r\n            background-color: red;\r\n            width: 100%;\r\n            height: 100%;\r\n        `;\r\n      \r\n        return (\r\n            <div style={boxStyle} onMouseEnter={this.props.onMouseEnter} onClick={this.props.onClick}>\r\n                {this.props.isMarked ? <Overlay/> : ''}\r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default Boxes;","import React, { Component } from 'react';\r\nimport './CustomButton.css';\r\n\r\nclass CustomButton extends Component {\r\n\r\n    getClass(){\r\n        var className = this.props.className;\r\n        return className ? className + \" custom-button\" : \"custom-button\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.props.onClick} class={this.getClass()}>{this.props.message}</button>\r\n        )\r\n      }\r\n}\r\n\r\nexport default CustomButton;","export default function utility(_boardWidth, _boardHeight){\r\n    let boardWidth = _boardWidth;\r\n    let boardHeight = _boardHeight;\r\n\r\n    var isLeftMost = (cellPosition) => {\r\n        if (cellPosition % boardWidth === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var isUpMost = (cellPosition) => {\r\n        if (cellPosition - boardWidth < 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var isRightMost = (cellPosition) => {\r\n        if (boardWidth - (cellPosition % boardWidth) === 1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var isDownMost = (cellPosition) => {\r\n        if ((cellPosition + boardWidth) >= (boardWidth * boardHeight)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var wrapsAroundTop = (cellPosition) => {\r\n        return cellPosition + (boardWidth * (boardHeight - 1));\r\n    }\r\n\r\n    var wrapsAroundLeft = (cellPosition) => {\r\n        return cellPosition + (boardWidth - 1);\r\n    }\r\n\r\n    var wrapsAroundRight = (cellPosition) => {\r\n        return cellPosition - (boardWidth - 1);\r\n    }\r\n\r\n    var wrapsAroundBottom = (cellPosition) => {\r\n        return cellPosition - (boardWidth * (boardHeight - 1));\r\n    }\r\n\r\n    var upperLeftAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition - boardWidth) - 1;\r\n\r\n        if (isLeftMost(cellPosition) && isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(wrapsAroundTop(cellPosition));\r\n        } else if (isLeftMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(cellPosition) - boardWidth;\r\n        } else if (isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundTop(cellPosition) - 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var upperAlive = (cellPosition) => {\r\n        var calculatedPosition = cellPosition - boardWidth;\r\n\r\n        if (isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundTop(cellPosition);\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var upperRightAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition - boardWidth) + 1;\r\n\r\n        if (isUpMost(cellPosition) && isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(wrapsAroundTop(cellPosition));\r\n        } else if (isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(cellPosition) - boardWidth;\r\n        } else if (isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundTop(cellPosition) + 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var leftAlive = (cellPosition) => {\r\n        var calculatedPosition = cellPosition - 1;\r\n\r\n        if (isLeftMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(cellPosition);\r\n        }\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var rightAlive = (cellPosition) => {\r\n        var calculatedPosition = cellPosition + 1;\r\n\r\n        if (isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(cellPosition);\r\n        }\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var downLeftAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition + boardWidth) - 1;\r\n\r\n        if (isLeftMost(cellPosition) && isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(wrapsAroundBottom(cellPosition));\r\n        } else if (isLeftMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(cellPosition) + boardWidth;\r\n        } else if (isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundBottom(cellPosition) - 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var downAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition + boardWidth);\r\n\r\n        if (isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundBottom(cellPosition);\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var downRightAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition + boardWidth) + 1;\r\n\r\n        if (isRightMost(cellPosition) && isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(wrapsAroundBottom(cellPosition));\r\n        } else if (isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(cellPosition) + boardWidth;\r\n        } else if (isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundBottom(cellPosition) + 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var getAdjacentCells = (cellPosition) => {\r\n        var arrayOfAdjacentCells = [];\r\n        arrayOfAdjacentCells.push(upperLeftAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(upperAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(upperRightAlive(cellPosition));\r\n\r\n        arrayOfAdjacentCells.push(leftAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(rightAlive(cellPosition));\r\n\r\n        arrayOfAdjacentCells.push(downLeftAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(downAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(downRightAlive(cellPosition));\r\n\r\n        return arrayOfAdjacentCells;\r\n    }\r\n\r\n    var getConnectedCells = (cellPosition, board) => {\r\n        var arrayOfConnectedCells = [];\r\n\r\n        function _getActiveAdjacentCells(cellPosition){\r\n            let activeAdjacentCells = [];\r\n\r\n            var adjacentCells = getAdjacentCells(cellPosition);\r\n\r\n            for(var i = 0; i < adjacentCells.length; i++){\r\n                \r\n                var cell = adjacentCells[i];\r\n\r\n                if(board[cell].active){\r\n                    activeAdjacentCells.push(cell);\r\n                }\r\n            }\r\n\r\n            return activeAdjacentCells;\r\n        }\r\n\r\n        function _getConnectedCells(cellPosition){\r\n            var activeAdjacentCells = _getActiveAdjacentCells(cellPosition);\r\n\r\n            if(activeAdjacentCells === undefined){\r\n                console.log(cellPosition);\r\n            }\r\n\r\n            for(var i = 0; i < activeAdjacentCells.length; i++){\r\n                //if this cell is not listed in the array of connected cell then add it and recursively look for other parts surrounding it\r\n                if(!arrayOfConnectedCells.includes(activeAdjacentCells[i])){\r\n                    arrayOfConnectedCells.push(activeAdjacentCells[i]);\r\n                    _getConnectedCells(activeAdjacentCells[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        _getConnectedCells(cellPosition);\r\n        return arrayOfConnectedCells;\r\n    }\r\n\r\n    function getPosition(x,y){\r\n        return (y*_boardWidth) + x;\r\n    }\r\n\r\n    function getPositionX(cellPosition){\r\n        return cellPosition % _boardWidth;\r\n    }\r\n\r\n    \r\n    function getPositionY(cellPosition){\r\n        return Math.floor(cellPosition/_boardWidth);\r\n    }\r\n\r\n    function getMooreCells(cellPositionX, cellPositionY){\r\n        var arrayCell = [];\r\n        for(var y = cellPositionY - 2; y <= cellPositionY + 2; y++){\r\n            for(var x = cellPositionX - 2; x <= cellPositionX + 2; x++){\r\n                arrayCell.push(getPosition(x,y));\r\n            }\r\n        }\r\n        return arrayCell;\r\n    }\r\n\r\n    function captureCellsState(cellPositionX, cellPositionY, board){\r\n        var cellPositions = getMooreCells(cellPositionX, cellPositionY);\r\n        var arrayOfCellsState = [];\r\n        \r\n        for(var i = 0; i < cellPositions.length; i++ ){\r\n            var obj = {\r\n                id: i,\r\n                active: board[cellPositions[i]].active\r\n            }\r\n            arrayOfCellsState.push(obj);\r\n        }\r\n        return arrayOfCellsState;\r\n    }\r\n\r\n    return {\r\n        getAdjacentCells: getAdjacentCells,\r\n        getConnectedCells: getConnectedCells,\r\n        getMooreCells: getMooreCells,\r\n        getPositionX: getPositionX,\r\n        getPositionY: getPositionY,\r\n        captureCellsState: captureCellsState\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport { keyframes } from \"styled-components\";\r\nimport styled from 'styled-components';\r\nimport Boxes from '../Boxes.js';\r\n\r\nclass ShapeGeneratorItem extends Component {\r\n    \r\n\r\n    render() {\r\n        var classApplied = (this.props.selected ? \"selected\": \"\") + \" shape-generator-item-wrapper\";\r\n\r\n        const body = <div class=\"shape-generator-item\" style={{display: \"grid\", gridTemplateColumns : `repeat(5, 10px)`, justifyContent: `center`, margin:\"10px\"}}>\r\n                        {this.props.boardShape.map(x => <Boxes id={x.id} active={x.active} minWidth=\"10px\" minHeight=\"10px\"/>)}\r\n                    </div>\r\n        return (\r\n            <div onClick={this.props.onClick} class={classApplied} >{body}</div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default ShapeGeneratorItem;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectShape } from '../../actions/postActions';\r\nimport ShapeGeneratorItem from '../ShapeGenerator/ShapeGeneratorItem.js';\r\nimport './ShapeGenerator.css';\r\n\r\nclass ShapeGeneratorContainer extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"shape-generator-container-wrapper\">\r\n                <div style={{width:\"20px\", backgroundColor:\"yellow\"}}></div>\r\n                <div class=\"shape-generator-items-container\">\r\n                    {this.props.savedShapes.map(x => <ShapeGeneratorItem id={x.id} selected={this.props.selectedShapeId === x.id ? true : false} onClick={() => {this.props.selectShape(x.id)}} boardShape={x.boardShape}/>)}\r\n                </div>\r\n                <div style={{width:\"20px\", backgroundColor:\"yellow\"}}></div>\r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        selectedShapeId: state.selectedShapeId\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        selectShape: (shapeId) => { dispatch(selectShape(shapeId))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShapeGeneratorContainer);","export const deletePost = (id) => {\r\n    return {\r\n        type: 'DELETE_POST',\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const toggleBox = (id) => {\r\n    return {\r\n        type: 'TOGGLE_BOX',\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const updateBoard = (board) => {\r\n    return {\r\n        type: 'UPDATE_BOARD',\r\n        board: board\r\n    }\r\n}\r\n\r\nexport const cleanBoard = (board) => {\r\n    return {\r\n        type: 'CLEAN_BOARD',\r\n        board: board\r\n    }\r\n}\r\n\r\nexport const saveShape = (boardShape) => {\r\n    return {\r\n        type: 'SAVE_SHAPE',\r\n        boardShape: boardShape\r\n    }\r\n}\r\n\r\nexport const selectShape = (shapeId) => {\r\n    return {\r\n        type: 'SELECT_SHAPE',\r\n        shapeId: shapeId\r\n    }\r\n}\r\n\r\nexport const applySelectedShape = (boardState) => {\r\n    return {\r\n        type: 'APPLY_SELECTED_SHAPE',\r\n        boardState: boardState\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deletePost, toggleBox, updateBoard, cleanBoard, saveShape, applySelectedShape } from '../actions/postActions';\r\nimport Boxes from '../components/Boxes.js';\r\nimport CustomButton from '../components/CustomButton.js';\r\nimport utility from './Utility.js'\r\nimport ShapeGeneratorContainer from '../components/ShapeGenerator/ShapeGeneratorContainer.js'\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            widthSize: \"20px\",\r\n            marked: [],\r\n            intervalId: 0,\r\n            clickState: 0,\r\n            clickStates: [\"Point\", \"Shape\", \"Capture\"]\r\n        };\r\n    }\r\n\r\n    toggleClickState = () => {\r\n        this.setState({clickState: (this.state.clickState + 1)%3, marked:[] });   \r\n     }\r\n\r\n     cleanBoard = () => {\r\n         this.props.cleanBoard();\r\n     }\r\n\r\n    calculateCellResult = (cellPosition) => {\r\n        var util = utility(this.props.boardWidth, this.props.boardHeight);\r\n        var isAlive = this.props.board[cellPosition].active === 1;\r\n        \r\n        var adjacentCells = util.getAdjacentCells(cellPosition);\r\n        var result = 0;\r\n        for(var x in adjacentCells){\r\n            result = result + this.props.board[adjacentCells[x]].active;\r\n        }\r\n\r\n        var state = 0;\r\n        if(!isAlive && result === 3){\r\n            state =  1;\r\n        }\r\n\r\n        if(isAlive && result <= 1){\r\n            state = 0;\r\n        }\r\n\r\n        if(isAlive && result >= 4){\r\n            state = 0\r\n        }\r\n\r\n        if(isAlive && (result === 2 || result === 3)){\r\n            state = 1;\r\n        }\r\n        return state;\r\n    }\r\n    \r\n    emptyBoard = () => {\r\n\r\n    }\r\n\r\n    updateBoardStateInterval = () => {\r\n        if(this.state.intervalId === 0){\r\n            var intervalId = setInterval(() => this.updateBoardState(), 200);\r\n            this.setState({intervalId: intervalId});\r\n        }else {\r\n            clearInterval(this.state.intervalId);\r\n            this.setState({intervalId: 0});\r\n        }\r\n    }\r\n\r\n    updateBoardState = () => {\r\n        var temp = this.props.board;\r\n        var newBoard = [];\r\n        for(let i = 0; i < temp.length; i++){\r\n            var obj = {\r\n                id: i,\r\n                active: this.calculateCellResult(i)\r\n            }\r\n            newBoard.push(obj);\r\n        }\r\n\r\n        this.props.updateBoard(newBoard);\r\n    }\r\n\r\n    isMarked = (id) => {\r\n      if(this.state.marked.findIndex(x => x === (id)) >= 0){\r\n          return true;\r\n      }\r\n    }\r\n\r\n    setMarked = (cellId) => {\r\n        var util = utility(this.props.boardWidth, this.props.boardHeight);        \r\n        this.setState({marked: util.getMooreCells(util.getPositionX(cellId), util.getPositionY(cellId))});\r\n    }\r\n\r\n    saveShape = (cellId) => {\r\n        var util = utility(this.props.boardWidth, this.props.boardHeight);   \r\n        this.props.saveShape(util.captureCellsState(util.getPositionX(cellId), util.getPositionY(cellId), this.props.board));\r\n    }\r\n\r\n    onBoxClick = (cellId) => {\r\n\r\n        if(this.state.clickStates[this.state.clickState] === \"Point\"){\r\n            this.props.toggleBox(cellId);\r\n        }\r\n\r\n        if(this.state.clickStates[this.state.clickState] === \"Shape\"){\r\n            var util = utility(this.props.boardWidth, this.props.boardHeight);   \r\n            \r\n            var selectedShapeBoardState = this.props.savedShapes[this.props.selectedShapeId].boardShape;\r\n\r\n            //Gets all affected cell location, eg : 21 22 23 24 25 and replace the value with the savedShape's corresponding 0 1 2 3 4\r\n            var arrayOfAffectedCells = util.getMooreCells(util.getPositionX(cellId), util.getPositionY(cellId), this.props.board);\r\n\r\n            for(var i =0; i < arrayOfAffectedCells.length; i++){\r\n                var cellId = arrayOfAffectedCells[i];\r\n                var activeState = selectedShapeBoardState[i].active;\r\n                this.props.board[cellId].active = activeState;\r\n            }\r\n\r\n            this.props.applySelectedShape(this.props.board);\r\n        }\r\n\r\n        if(this.state.clickStates[this.state.clickState] === \"Capture\"){\r\n            this.saveShape(cellId)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.width;\r\n        const widthSize = this.state.widthSize;\r\n        const bodyStyle = {\r\n            display: \"grid\",\r\n            gridTemplateColumns : `repeat(${this.props.boardWidth}, ${this.state.widthSize})`,\r\n            justifyContent: `center`\r\n        }\r\n        \r\n        const body = <div style={{display: \"grid\", gridTemplateColumns : `repeat(${this.props.boardWidth}, ${this.state.widthSize})`, justifyContent: `center`, margin:\"10px\"}}>\r\n                        {this.props.board.map(x => <Boxes id={x.id} \r\n                                                          active={x.active} \r\n                                                          isMarked={this.isMarked(x.id)} \r\n                                                          onMouseEnter={() => {this.setMarked(x.id)}}\r\n                                                          onClick={() => {this.onBoxClick(x.id)}}\r\n                                                          />)}\r\n                    </div>\r\n\r\n        const buttonContainer = <div style={{display:\"flex\", justifyContent:\"space-between\"}}>\r\n                                    <CustomButton onClick={this.toggleClickState} message={this.state.clickStates[this.state.clickState]}/>\r\n                                    <CustomButton onClick={this.updateBoardStateInterval} message=\"Update\" className={this.state.intervalId != 0 ? \"on\": \"off\"}/>\r\n                                    <CustomButton onClick={this.cleanBoard} message=\"Clear\"/>\r\n                                </div>               \r\n\r\n        return (\r\n            <div style={{width: \"80%\", margin:\"20px\"}}>\r\n                <ShapeGeneratorContainer savedShapes={this.props.savedShapes}></ShapeGeneratorContainer>\r\n                {body}\r\n                {buttonContainer}\r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let id = ownProps.postId;\r\n    return {\r\n        post: state.posts.find(post => post.id === id),\r\n        board: state.board,\r\n        boardWidth: state.boardWidth,\r\n        boardHeight: state.boardHeight,\r\n        savedShapes: state.savedShapes,\r\n        selectedShapeId: state.selectedShapeId\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deletePost: (id) => { dispatch(deletePost(id))},\r\n        toggleBox: (id) => { dispatch(toggleBox(id))},\r\n        updateBoard: (board) => { dispatch(updateBoard(board))},\r\n        cleanBoard: (board) => { dispatch(cleanBoard())},\r\n        saveShape: (boardShape) => { dispatch(saveShape(boardShape))},\r\n        applySelectedShape: (boardState) => {dispatch(applySelectedShape(boardState))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home postId=\"1\"/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    posts: [{id:'1', title: 'F', body: 'Hello', name: 'Josh'}],\r\n    board: generateBoard(20,20),\r\n    savedShapes: [],\r\n    boardWidth: 20,\r\n    boardHeight:20,\r\n    selectedShapeId: 0\r\n}\r\n\r\nfunction generateBoard(x, y){\r\n    var array = [];\r\n    \r\n    for (var i = 0; i < x*y; i++) {\r\n        var obj = {\r\n            id: i,\r\n            active: Math.round(Math.random())\r\n        } \r\n        array.push(obj);\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nfunction cleanBoard(x, y){\r\n    var array = [];\r\n    \r\n    for (var i = 0; i < x*y; i++) {\r\n        var obj = {\r\n            id: i,\r\n            active: 0\r\n        } \r\n        array.push(obj);\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if(action.type === 'DELETE_POST'){\r\n        let newPosts = state.posts.filter(post => {\r\n            return action.id !== post.id;\r\n        });\r\n        return {\r\n            ...state,\r\n            posts: newPosts\r\n        }\r\n    }\r\n\r\n    if(action.type === 'TOGGLE_BOX'){\r\n        var x = state.board.map((item, index) => {\r\n            if(item.id === action.id){\r\n                item.active = (item.active === 0) ? 1 : 0;\r\n            }        \r\n            return item;\r\n          });\r\n        return {\r\n            ...state,\r\n            board: x\r\n        }\r\n    }\r\n\r\n    if(action.type === 'UPDATE_BOARD'){\r\n        return {\r\n            ...state,\r\n            board: action.board\r\n        }\r\n    }\r\n\r\n    if(action.type === 'CLEAN_BOARD'){\r\n        return {\r\n            ...state,\r\n            board: cleanBoard(state.boardWidth, state.boardHeight)\r\n        }\r\n    }\r\n\r\n    if(action.type === 'SAVE_SHAPE'){\r\n        var temp = {\r\n            id: state.savedShapes.length,\r\n            boardShape: action.boardShape\r\n        }\r\n        return {\r\n            ...state,\r\n            savedShapes: [...state.savedShapes, temp]\r\n        }\r\n    }\r\n\r\n    if(action.type === 'SELECT_SHAPE'){\r\n        return {\r\n            ...state,\r\n            selectedShapeId: action.shapeId\r\n        }\r\n    }\r\n\r\n    if(action.type === 'APPLY_SELECTED_SHAPE'){\r\n        var temp = [...action.boardState];\r\n        temp[0].active = 1;\r\n        return {\r\n            ...state,\r\n            board: temp\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}