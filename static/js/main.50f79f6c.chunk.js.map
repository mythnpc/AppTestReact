{"version":3,"sources":["logo.svg","components/Boxes.js","components/CustomButton.js","components/Utility.js","components/Home.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","Boxes","getColor","props","active","boxStyle","backgroundColor","this","height","width","border","rotate","keyframes","Overlay","styled","div","style","onMouseOver","onClick","isMarked","Component","CustomButton","clickState","class","getClass","utility","isLeftMost","cellPosition","isUpMost","isRightMost","isDownMost","boardWidth","wrapsAroundTop","wrapsAroundLeft","wrapsAroundRight","wrapsAroundBottom","getAdjacentCells","arrayOfAdjacentCells","push","calculatedPosition","upperLeftAlive","upperAlive","upperRightAlive","leftAlive","rightAlive","downLeftAlive","downAlive","downRightAlive","getConnectedCells","board","arrayOfConnectedCells","_getConnectedCells","activeAdjacentCells","adjacentCells","i","length","cell","_getActiveAdjacentCells","undefined","console","log","includes","Home","toggleClickState","temp","state","setState","marked","calculateCellResult","util","isAlive","result","x","updateBoardStateInterval","intervalId","setInterval","updateBoardState","clearInterval","newBoard","obj","id","updateBoard","findIndex","setMarked","cellId","widthSize","bodyStyle","display","gridTemplateColumns","body","map","toggleBox","className","connect","ownProps","postId","post","posts","find","boardHeight","dispatch","deletePost","type","App","Boolean","window","location","hostname","match","initState","title","name","y","array","Math","round","random","generateBoard","rootReducer","action","newPosts","filter","item","index","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50f79f6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { keyframes } from \"styled-components\";\r\nimport styled from 'styled-components';\r\n\r\nclass Boxes extends Component {\r\n    getColor = () => {\r\n\r\n        return this.props.active === 1 ? \"black\" : \"white\";\r\n    }\r\n\r\n    render() {\r\n        const boxStyle = {\r\n            backgroundColor: this.getColor(),\r\n            height: \"20px\",\r\n            width: \"20px\",\r\n            border: \"1px solid lightblue\"\r\n        }\r\n\r\n\r\n        const rotate = keyframes`\r\n            from {\r\n                background-color: ${this.getColor()};\r\n            }\r\n        \r\n            to {\r\n                background-color: red;\r\n            }\r\n        `;\r\n\r\n        const Overlay = styled.div`\r\n            opacity: 0.5;\r\n            background-color: red;\r\n            width: 100%;\r\n            height: 100%;\r\n            animation: ${rotate} 0.5s linear;\r\n            \r\n        `;\r\n      \r\n\r\n\r\n\r\n        return (\r\n            <div style={boxStyle} onMouseOver={this.props.onMouseOver} onClick={this.props.onClick}>\r\n                {this.props.isMarked ? <Overlay/> : ''}\r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default Boxes;","import React, { Component } from 'react';\r\nimport './CustomButton.css';\r\n\r\nclass CustomButton extends Component {\r\n\r\n    getClass(){\r\n        return this.props.clickState ? \"custom-button on\" : \"custom-button off\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.props.onClick} class={this.getClass()}>{this.props.clickState ? \"Activate\" : \"Adjacent\"}</div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default CustomButton;","export default function utility(){\r\n    let boardWidth = 20;\r\n    let boardHeight = 20;\r\n\r\n    var isLeftMost = (cellPosition) => {\r\n        if (cellPosition % boardWidth === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var isUpMost = (cellPosition) => {\r\n        if (cellPosition - boardWidth < 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var isRightMost = (cellPosition) => {\r\n        if (boardWidth - (cellPosition % boardWidth) === 1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var isDownMost = (cellPosition) => {\r\n        if ((cellPosition + boardWidth) >= (boardWidth * boardHeight)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    var wrapsAroundTop = (cellPosition) => {\r\n        return cellPosition + (boardWidth * (boardHeight - 1));\r\n    }\r\n\r\n    var wrapsAroundLeft = (cellPosition) => {\r\n        return cellPosition + (boardWidth - 1);\r\n    }\r\n\r\n    var wrapsAroundRight = (cellPosition) => {\r\n        return cellPosition - (boardWidth - 1);\r\n    }\r\n\r\n    var wrapsAroundBottom = (cellPosition) => {\r\n        return cellPosition - (boardWidth * (boardHeight - 1));\r\n    }\r\n\r\n    var upperLeftAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition - boardWidth) - 1;\r\n\r\n        if (isLeftMost(cellPosition) && isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(wrapsAroundTop(cellPosition));\r\n        } else if (isLeftMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(cellPosition) - boardWidth;\r\n        } else if (isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundTop(cellPosition) - 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var upperAlive = (cellPosition) => {\r\n        var calculatedPosition = cellPosition - boardWidth;\r\n\r\n        if (isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundTop(cellPosition);\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var upperRightAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition - boardWidth) + 1;\r\n\r\n        if (isUpMost(cellPosition) && isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(wrapsAroundTop(cellPosition));\r\n        } else if (isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(cellPosition) - boardWidth;\r\n        } else if (isUpMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundTop(cellPosition) + 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var leftAlive = (cellPosition) => {\r\n        var calculatedPosition = cellPosition - 1;\r\n\r\n        if (isLeftMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(cellPosition);\r\n        }\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var rightAlive = (cellPosition) => {\r\n        var calculatedPosition = cellPosition + 1;\r\n\r\n        if (isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(cellPosition);\r\n        }\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var downLeftAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition + boardWidth) - 1;\r\n\r\n        if (isLeftMost(cellPosition) && isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(wrapsAroundBottom(cellPosition));\r\n        } else if (isLeftMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundLeft(cellPosition) + boardWidth;\r\n        } else if (isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundBottom(cellPosition) - 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var downAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition + boardWidth);\r\n\r\n        if (isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundBottom(cellPosition);\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var downRightAlive = (cellPosition) => {\r\n        var calculatedPosition = (cellPosition + boardWidth) + 1;\r\n\r\n        if (isRightMost(cellPosition) && isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(wrapsAroundBottom(cellPosition));\r\n        } else if (isRightMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundRight(cellPosition) + boardWidth;\r\n        } else if (isDownMost(cellPosition)) {\r\n            calculatedPosition = wrapsAroundBottom(cellPosition) + 1;\r\n        }\r\n\r\n        return calculatedPosition;\r\n    }\r\n\r\n    var getAdjacentCells = (cellPosition) => {\r\n        var arrayOfAdjacentCells = [];\r\n        arrayOfAdjacentCells.push(upperLeftAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(upperAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(upperRightAlive(cellPosition));\r\n\r\n        arrayOfAdjacentCells.push(leftAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(rightAlive(cellPosition));\r\n\r\n        arrayOfAdjacentCells.push(downLeftAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(downAlive(cellPosition));\r\n        arrayOfAdjacentCells.push(downRightAlive(cellPosition));\r\n\r\n        return arrayOfAdjacentCells;\r\n    }\r\n\r\n    var getConnectedCells = (cellPosition, board) => {\r\n        var arrayOfConnectedCells = [];\r\n\r\n        function _getActiveAdjacentCells(cellPosition){\r\n            let activeAdjacentCells = [];\r\n\r\n            var adjacentCells = getAdjacentCells(cellPosition);\r\n\r\n            for(var i = 0; i < adjacentCells.length; i++){\r\n                \r\n                var cell = adjacentCells[i];\r\n\r\n                if(board[cell].active){\r\n                    activeAdjacentCells.push(cell);\r\n                }\r\n            }\r\n\r\n            return activeAdjacentCells;\r\n        }\r\n\r\n        function _getConnectedCells(cellPosition){\r\n            var activeAdjacentCells = _getActiveAdjacentCells(cellPosition);\r\n\r\n            if(activeAdjacentCells === undefined){\r\n                console.log(cellPosition);\r\n            }\r\n\r\n            for(var i = 0; i < activeAdjacentCells.length; i++){\r\n                //if this cell is not listed in the array of connected cell then add it and recursively look for other parts surrounding it\r\n                if(!arrayOfConnectedCells.includes(activeAdjacentCells[i])){\r\n                    arrayOfConnectedCells.push(activeAdjacentCells[i]);\r\n                    _getConnectedCells(activeAdjacentCells[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        _getConnectedCells(cellPosition);\r\n        return arrayOfConnectedCells;\r\n    }\r\n    \r\n    return {\r\n        getAdjacentCells: getAdjacentCells,\r\n        getConnectedCells: getConnectedCells\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deletePost, toggleBox, updateBoard } from '../actions/postActions';\r\nimport Boxes from '../components/Boxes.js';\r\nimport CustomButton from '../components/CustomButton.js';\r\nimport utility from './Utility.js'\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            widthSize: \"20px\",\r\n            marked: [],\r\n            intervalId: 0,\r\n            clickState: true\r\n        };\r\n    }\r\n\r\n    toggleClickState = () => {\r\n        var temp = this.state.clickState;\r\n        this.setState({clickState: !temp, marked:[] });   \r\n     }\r\n\r\n    calculateCellResult = (cellPosition) => {\r\n        var util = utility();\r\n        var isAlive = this.props.board[cellPosition].active === 1;\r\n        \r\n        var adjacentCells = util.getAdjacentCells(cellPosition);\r\n        var result = 0;\r\n        for(var x in adjacentCells){\r\n            result = result + this.props.board[adjacentCells[x]].active;\r\n        }\r\n\r\n        var state = 0;\r\n        if(!isAlive && result === 3){\r\n            state =  1;\r\n        }\r\n\r\n        if(isAlive && result <= 1){\r\n            state = 0;\r\n        }\r\n\r\n        if(isAlive && result >= 4){\r\n            state = 0\r\n        }\r\n\r\n        if(isAlive && (result === 2 || result === 3)){\r\n            state = 1;\r\n        }\r\n        return state;\r\n    }\r\n\r\n    updateBoardStateInterval = () => {\r\n        if(this.state.intervalId === 0){\r\n            var intervalId = setInterval(() => this.updateBoardState(), 200);\r\n            console.log(intervalId);\r\n            this.setState({intervalId: intervalId});\r\n        }else {\r\n            clearInterval(this.state.intervalId);\r\n            this.setState({intervalId: 0});\r\n        }\r\n    }\r\n\r\n    updateBoardState = () => {\r\n        var temp = this.props.board;\r\n        var newBoard = [];\r\n        for(let i = 0; i < temp.length; i++){\r\n            var obj = {\r\n                id: i+1,\r\n                active: this.calculateCellResult(i)\r\n            }\r\n            newBoard.push(obj);\r\n        }\r\n\r\n        this.props.updateBoard(newBoard);\r\n    }\r\n\r\n    isMarked = (id) => {\r\n      if(this.state.marked.findIndex(x => x === (id-1)) >= 0){\r\n          return true;\r\n      }\r\n    }\r\n\r\n    setMarked = (cellId) => {\r\n        console.log(\"CALLED\");\r\n        var util = utility();        \r\n        if(this.props.board[cellId-1].active){\r\n            this.setState({marked: util.getConnectedCells(cellId - 1, this.props.board)});\r\n        }else {\r\n            this.setState({marked: []});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const width = this.state.width;\r\n        const widthSize = this.state.widthSize;\r\n        const bodyStyle = {\r\n            display: \"grid\",\r\n            gridTemplateColumns : `repeat(${this.props.boardWidth}, ${this.state.widthSize})`\r\n        }\r\n        \r\n        const body = <div style={bodyStyle}>\r\n                        {this.props.board.map(x => <Boxes id={x.id} \r\n                                                          active={x.active} \r\n                                                          isMarked={this.isMarked(x.id)} \r\n                                                          /* onClick={() => this.setMarked(x.id)}  */\r\n                                                          onClick={() => {this.state.clickState ? this.props.toggleBox(x.id): this.setMarked(x.id)}}\r\n                                                          />)}\r\n                    </div>\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {body}\r\n                <div>\r\n                    <button onClick={this.updateBoardStateInterval}>Update</button>\r\n                    <CustomButton onClick={this.toggleClickState} clickState={this.state.clickState}/>\r\n                </div>                \r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let id = ownProps.postId;\r\n    return {\r\n        post: state.posts.find(post => post.id === id),\r\n        board: state.board,\r\n        boardWidth: state.boardWidth,\r\n        boardHeight: state.boardHeight\r\n    } \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deletePost: (id) => { dispatch(deletePost(id))},\r\n        toggleBox: (id) => { dispatch(toggleBox(id))},\r\n        updateBoard: (board) => { dispatch(updateBoard(board))}\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","export const deletePost = (id) => {\r\n    return {\r\n        type: 'DELETE_POST',\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const toggleBox = (id) => {\r\n    return {\r\n        type: 'TOGGLE_BOX',\r\n        id: id\r\n    }\r\n}\r\n\r\nexport const updateBoard = (board) => {\r\n    return {\r\n        type: 'UPDATE_BOARD',\r\n        board: board\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home postId=\"1\"/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    posts: [{id:'1', title: 'F', body: 'Hello', name: 'Josh'}],\r\n    board: generateBoard(20,20),\r\n    boardWidth: 20,\r\n    boardHeight:20\r\n}\r\n\r\nfunction generateBoard(x, y){\r\n    var array = [];\r\n    \r\n    for (var i = 1; i <= x*y; i++) {\r\n        var obj = {\r\n            id: i,\r\n            active: Math.round(Math.random())\r\n        } \r\n        array.push(obj);\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if(action.type === 'DELETE_POST'){\r\n        let newPosts = state.posts.filter(post => {\r\n            return action.id !== post.id;\r\n        });\r\n        return {\r\n            ...state,\r\n            posts: newPosts\r\n        }\r\n    }\r\n\r\n    if(action.type === 'TOGGLE_BOX'){\r\n        var x = state.board.map((item, index) => {\r\n            if(item.id === action.id){\r\n                item.active = (item.active === 0) ? 1 : 0;\r\n            }        \r\n            // Leave every other item unchanged\r\n            return item;\r\n          });\r\n        return {\r\n            ...state,\r\n            board: x\r\n        }\r\n    }\r\n\r\n    if(action.type === 'UPDATE_BOARD'){\r\n        return {\r\n            ...state,\r\n            board: action.board\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}